# QitOps CLI — Context Overview for AI Assistants (e.g. Augment)

You are assisting in the development of the QitOps CLI — a Rust-based command-line tool for comprehensive software testing (API, performance, and security), built for use in a custom Linux OS called QitOps OS.

## Scope (Current Phase)
- CLI-first implementation (no AI integration yet)
- Built using Rust with structured modules
- Focused on:
  - API test execution with retry, validation, and response tracking
  - Performance test execution with concurrent user simulation
  - Security scan execution with configurable scan types and severity checks

## Architecture
- `main.rs` handles CLI parsing (using clap)
- Modules: `api.rs`, `performance.rs`, `security.rs`, `common.rs`, `error.rs`
- Tests are defined using JSON config files
- Outputs structured test results to stdout

## Constraints
- Keep dependencies minimal and native (Rust standard lib + well-known crates)
- Ensure tool can be compiled to a static binary for Linux (e.g. for `/usr/local/bin`)
- All functionality must be accessible via CLI flags (no UI)

## Use Case
This CLI will be bundled into a custom bootable Linux distro (QitOps OS) used by QA professionals to run tests directly from the terminal.

## Output Format
- Human-readable summary
- Machine-readable (optional flag): JSON output for CI integration
- Consistent timestamped output for audit trails

## Help Goals
Prioritize:
- Clear module boundaries
- CLI usability and documentation
- Reusability for future TUI or CI integrations
- Extensibility (future AI-based test generation modules)

# You are helping evolve a professional-grade QA testing CLI that forms the core of a full OS for testers.
